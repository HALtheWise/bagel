// Code generated by capnpc-go. DO NOT EDIT.

package graph

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Constants defined in graph.capnp.
const (
	RefData_bitsForKind = uint32(2)
	RefData_kindRef     = uint32(1)
	RefData_kindString  = uint32(2)
	RefData_kindData    = uint32(3)
)

type RefData struct{ capnp.Struct }

// RefData_TypeID is the unique identifier for the type RefData.
const RefData_TypeID = 0x98886448aacaa938

func NewRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func NewRootRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func ReadRootRefData(msg *capnp.Message) (RefData, error) {
	root, err := msg.RootPtr()
	return RefData{root.Struct()}, err
}

func (s RefData) String() string {
	str, _ := text.Marshal(0x98886448aacaa938, s.Struct)
	return str
}

func (s RefData) Left() uint32 {
	return s.Struct.Uint32(0)
}

func (s RefData) SetLeft(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s RefData) Right() uint32 {
	return s.Struct.Uint32(4)
}

func (s RefData) SetRight(v uint32) {
	s.Struct.SetUint32(4, v)
}

// RefData_List is a list of RefData.
type RefData_List struct{ capnp.List }

// NewRefData creates a new list of RefData.
func NewRefData_List(s *capnp.Segment, sz int32) (RefData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RefData_List{l}, err
}

func (s RefData_List) At(i int) RefData { return RefData{s.List.Struct(i)} }

func (s RefData_List) Set(i int, v RefData) error { return s.List.SetStruct(i, v.Struct) }

func (s RefData_List) String() string {
	str, _ := text.MarshalList(0x98886448aacaa938, s.List)
	return str
}

// RefData_Promise is a wrapper for a RefData promised by a client call.
type RefData_Promise struct{ *capnp.Pipeline }

func (p RefData_Promise) Struct() (RefData, error) {
	s, err := p.Pipeline.Struct()
	return RefData{s}, err
}

type FuncObj struct{ capnp.Struct }

// FuncObj_TypeID is the unique identifier for the type FuncObj.
const FuncObj_TypeID = 0x833effa94af38e69

func NewFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func NewRootFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func ReadRootFuncObj(msg *capnp.Message) (FuncObj, error) {
	root, err := msg.RootPtr()
	return FuncObj{root.Struct()}, err
}

func (s FuncObj) String() string {
	str, _ := text.Marshal(0x833effa94af38e69, s.Struct)
	return str
}

func (s FuncObj) Kind() uint32 {
	return s.Struct.Uint32(4)
}

func (s FuncObj) SetKind(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s FuncObj) Arg() uint32 {
	return s.Struct.Uint32(0)
}

func (s FuncObj) SetArg(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s FuncObj) Dependencies() (capnp.UInt32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt32List{List: p.List()}, err
}

func (s FuncObj) HasDependencies() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FuncObj) SetDependencies(v capnp.UInt32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDependencies sets the dependencies field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s FuncObj) NewDependencies(n int32) (capnp.UInt32List, error) {
	l, err := capnp.NewUInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FuncObj) Result() (capnp.Pointer, error) {
	return s.Struct.Pointer(1)
}

func (s FuncObj) HasResult() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FuncObj) ResultPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s FuncObj) SetResult(v capnp.Pointer) error {
	return s.Struct.SetPointer(1, v)
}

func (s FuncObj) SetResultPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// FuncObj_List is a list of FuncObj.
type FuncObj_List struct{ capnp.List }

// NewFuncObj creates a new list of FuncObj.
func NewFuncObj_List(s *capnp.Segment, sz int32) (FuncObj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FuncObj_List{l}, err
}

func (s FuncObj_List) At(i int) FuncObj { return FuncObj{s.List.Struct(i)} }

func (s FuncObj_List) Set(i int, v FuncObj) error { return s.List.SetStruct(i, v.Struct) }

func (s FuncObj_List) String() string {
	str, _ := text.MarshalList(0x833effa94af38e69, s.List)
	return str
}

// FuncObj_Promise is a wrapper for a FuncObj promised by a client call.
type FuncObj_Promise struct{ *capnp.Pipeline }

func (p FuncObj_Promise) Struct() (FuncObj, error) {
	s, err := p.Pipeline.Struct()
	return FuncObj{s}, err
}

func (p FuncObj_Promise) Result() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(1)
}

type DiskCache struct{ capnp.Struct }

// DiskCache_TypeID is the unique identifier for the type DiskCache.
const DiskCache_TypeID = 0x8c65657245fa62cc

func NewDiskCache(s *capnp.Segment) (DiskCache, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return DiskCache{st}, err
}

func NewRootDiskCache(s *capnp.Segment) (DiskCache, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return DiskCache{st}, err
}

func ReadRootDiskCache(msg *capnp.Message) (DiskCache, error) {
	root, err := msg.RootPtr()
	return DiskCache{root.Struct()}, err
}

func (s DiskCache) String() string {
	str, _ := text.Marshal(0x8c65657245fa62cc, s.Struct)
	return str
}

func (s DiskCache) Version() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DiskCache) HasVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiskCache) VersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DiskCache) SetVersion(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DiskCache) Refs() (RefData_List, error) {
	p, err := s.Struct.Ptr(1)
	return RefData_List{List: p.List()}, err
}

func (s DiskCache) HasRefs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetRefs(v RefData_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRefs sets the refs field to a newly
// allocated RefData_List, preferring placement in s's segment.
func (s DiskCache) NewRefs(n int32) (RefData_List, error) {
	l, err := NewRefData_List(s.Struct.Segment(), n)
	if err != nil {
		return RefData_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s DiskCache) Strings() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt8List{List: p.List()}, err
}

func (s DiskCache) HasStrings() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetStrings(v capnp.UInt8List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewStrings sets the strings field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s DiskCache) NewStrings(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s DiskCache) StringsUsed() uint32 {
	return s.Struct.Uint32(0)
}

func (s DiskCache) SetStringsUsed(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s DiskCache) Funcs() (FuncObj_List, error) {
	p, err := s.Struct.Ptr(3)
	return FuncObj_List{List: p.List()}, err
}

func (s DiskCache) HasFuncs() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetFuncs(v FuncObj_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewFuncs sets the funcs field to a newly
// allocated FuncObj_List, preferring placement in s's segment.
func (s DiskCache) NewFuncs(n int32) (FuncObj_List, error) {
	l, err := NewFuncObj_List(s.Struct.Segment(), n)
	if err != nil {
		return FuncObj_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s DiskCache) NumRefs() uint32 {
	return s.Struct.Uint32(4)
}

func (s DiskCache) SetNumRefs(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s DiskCache) NumFuncs() uint32 {
	return s.Struct.Uint32(8)
}

func (s DiskCache) SetNumFuncs(v uint32) {
	s.Struct.SetUint32(8, v)
}

// DiskCache_List is a list of DiskCache.
type DiskCache_List struct{ capnp.List }

// NewDiskCache creates a new list of DiskCache.
func NewDiskCache_List(s *capnp.Segment, sz int32) (DiskCache_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return DiskCache_List{l}, err
}

func (s DiskCache_List) At(i int) DiskCache { return DiskCache{s.List.Struct(i)} }

func (s DiskCache_List) Set(i int, v DiskCache) error { return s.List.SetStruct(i, v.Struct) }

func (s DiskCache_List) String() string {
	str, _ := text.MarshalList(0x8c65657245fa62cc, s.List)
	return str
}

// DiskCache_Promise is a wrapper for a DiskCache promised by a client call.
type DiskCache_Promise struct{ *capnp.Pipeline }

func (p DiskCache_Promise) Struct() (DiskCache, error) {
	s, err := p.Pipeline.Struct()
	return DiskCache{s}, err
}

type RefResult struct{ capnp.Struct }

// RefResult_TypeID is the unique identifier for the type RefResult.
const RefResult_TypeID = 0x98fd92d0ad976d9a

func NewRefResult(s *capnp.Segment) (RefResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefResult{st}, err
}

func NewRootRefResult(s *capnp.Segment) (RefResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefResult{st}, err
}

func ReadRootRefResult(msg *capnp.Message) (RefResult, error) {
	root, err := msg.RootPtr()
	return RefResult{root.Struct()}, err
}

func (s RefResult) String() string {
	str, _ := text.Marshal(0x98fd92d0ad976d9a, s.Struct)
	return str
}

func (s RefResult) Ref() uint32 {
	return s.Struct.Uint32(0)
}

func (s RefResult) SetRef(v uint32) {
	s.Struct.SetUint32(0, v)
}

// RefResult_List is a list of RefResult.
type RefResult_List struct{ capnp.List }

// NewRefResult creates a new list of RefResult.
func NewRefResult_List(s *capnp.Segment, sz int32) (RefResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RefResult_List{l}, err
}

func (s RefResult_List) At(i int) RefResult { return RefResult{s.List.Struct(i)} }

func (s RefResult_List) Set(i int, v RefResult) error { return s.List.SetStruct(i, v.Struct) }

func (s RefResult_List) String() string {
	str, _ := text.MarshalList(0x98fd92d0ad976d9a, s.List)
	return str
}

// RefResult_Promise is a wrapper for a RefResult promised by a client call.
type RefResult_Promise struct{ *capnp.Pipeline }

func (p RefResult_Promise) Struct() (RefResult, error) {
	s, err := p.Pipeline.Struct()
	return RefResult{s}, err
}

const schema_85d3acc39d94e0f8 = "x\xda\x94\x93O\x88\x1cE\x14\xc6\xbf\xaf\xaazg\"" +
	"kf;=\x01\x17\x03\xabK\x84$h\xb21\x0a!" +
	"\x07\xa3\xc9\x1ausp\xab\xc7\x1c\x14#\xe9\x99\xa9\x99" +
	"\xe9d\xb6\xb3t\xf7\xe8EX$\x0a9\x88B\x10\xd4" +
	"\x80\x08\x9eL\x88(\xa2B\xc0\x9b\x07\xff` \x18\xbc" +
	"yP\x08\x84\xdc\x04\x0d\xac!\xa1\xa5\xbaw\xdb\xc6\x15" +
	"\xcc^\xba\xbb^\xff\xde\xab\xfa\xde\xf7j\xe6\x02\x1f\x17" +
	"\xbb\x9do\x05\xa0\xefs\xc6\xb2\xf0\xad?\xe6\xcee\x8f" +
	"\x9d\x82\x9e&\xb3\xe5_\xdf\xf9\xe0\x9b\x0bW\xde\x80#" +
	"j\xc0\x9eg\xe8\xd3;\xca\x1a\xe0=\xcfk`\xf6c" +
	"\xfb\xe6\x93\xb11oZZThe\xe9'D\x9b\xde" +
	"\x91<Q\x8b\xb7\x09f{\xcf\xfdp\xfe\xe9\xee\xe9\xf7" +
	"\xfeU<\xa7]\xe5\xd3{@=\x05xG\xd5+`" +
	"vv\xe1\xddO.\x9f\xb9\xfd\x9f\xf0E\xd5\xa6w\xc9" +
	"~z\xdf\xab\xfd`\xf6\xf1s\xc7\xde\xbfr\xd7\xef_" +
	"\xc1\xdd\xa1\xfe\xd9\x06\xdcs]\x9d\xa5G\xa7\x06\xb4n" +
	")\xc9V\xdd\x11\x04\xb2\x0f\xef\xfd\xe8\xd3\x9b/\xc5?" +
	"\xad\xe1\xffR\xe7\xe9\xb99?\xeeH\xb6\xee)\xf8\x9f" +
	"\xaf\xf1\xe0\xcc\x86\xeb7\xd6\xf0\x1b\x9c3\xf4\xee\xcf\xf9" +
	"-\x96\xdfV\xf0WOm}t\xfb\x8csk\x0d?" +
	"\xe9|Now\xce?h\xf9\xbd\x05\x1fF\xa9\x89\xa3" +
	"`\xa8vu;Ag`v\xf5\xe3`qP<w" +
	"v\x82\xc5hq\xdf\xa1Q\xd4y\xb6\xcd\xe3\xf3\xa4\x9e" +
	"\x90\x8aT\x04\xdc`\x1a\xd0/J\xea\x81\xe0\x04\x9b\xb4" +
	"1\xb3\x03\xd0\xc7$\xf5P\x90\xa2I\x01\xb8\xe1q@" +
	"\x0f$\xf5\xeb\x82\xaed\x93\x12p_\xdb\x07\xe8W%" +
	"\xf5i\xc1Z\x10\xf7Y\x87`\x1dl\x9c\x08\xa3\xee\xea" +
	"\"\xeb\x9aE\x13uM\x84F'4\x097\x82\xf3\x92" +
	"\xf9\xdf\x8d\xe0\xfe\xd8$\xa3a\xcaM\x10\xdc\x04\xde\x89" +
	"\x90\xd909q0\xa8u\x06\xc6J\xd9\"\x15\x90K" +
	"\xf9\xf2\x00\xa0?\x93\xd4_\x0b\xba\\\xd1r\xd1j\xf9" +
	"BR_\x16t\xc5\x8a\x98K\x96\xfcNR_\x15t" +
	"\x95,\xc4\xfc\xf60\xa0\x7f\x91\xd4\xcb\x82\x94M*\xc0" +
	"\xbd\xd1\x06\xf4\x9f\x92>\x05]\x87M:\x80{\xdbf" +
	"/K\xb6\x94\x8d\x8e\x89&\xc7\x00\x8f\x9c\x03|J\xb6" +
	"\xc6)\xb8\xf4\xb2\x89\x93\xf0d\xc4q\x08\x8e\x83\x8d\xd8" +
	"\xf4J\xe9\x13UGmp)I\xe30\xea\x97\xc0X" +
	"\xd1\x9b\xa9\xde(\xeaT\xb2\xca\xbbUde+YG" +
	"PKL\xd9\xee\xa5h\xb4\xe0\xdb\xcdV\xdb\x1f\x8d\x16" +
	"\xac\xf5\x09\x802v\x07]\xf6Mo6H\x19\xe8\x09" +
	"\xb22\x8e\x93\xed\xca,O\x1e\xa8\\\x84\xcd/Tn" +
	"\xd1\xe6\xb9\xac\x1d\xa6\xc9\xa1\x93\xf1a\xd4\xc2\xa8\xbbd" +
	"'\xc27\xbd\xcc\xbe[i\x1cBF\xfd|1\x1b\xa4" +
	"\x01\x00]/}\xdcn-\xdb*\xa9g*>>d" +
	"\xdd\xd9&\xa9\x1f\x11l\x0cM/]\xd52\x15\x87\xfd" +
	"A\xbaNe\xbeIj\xa3aj\xe7G\x95\xfb\xde=" +
	"\x9d\x1f\x83\xba)X\x8bMoMM\xe7\xff\xba\x15\xec" +
	",\x14\xc94\x98g>\xe2n]\xae\xbf@+mX" +
	"c\xcb\x12b\xfd%|\xc3^\x99\xcf\xf5\xe5\x17\xc6M" +
	"\xc5\x87\xc3\xa8[=\xc3\xdf\x01\x00\x00\xff\xff\xf2\x01\x91" +
	"U"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x833effa94af38e69,
		0x8c65657245fa62cc,
		0x98886448aacaa938,
		0x98fd92d0ad976d9a,
		0xb6f00ad3996054a8,
		0xd2725efaafa21b9f,
		0xf5e909304301e7d5,
		0xfc053029352483e4)
}
