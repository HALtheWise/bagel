// Code generated by capnpc-go. DO NOT EDIT.

package graph

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RefData struct{ capnp.Struct }

// RefData_TypeID is the unique identifier for the type RefData.
const RefData_TypeID = 0x98886448aacaa938

func NewRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func NewRootRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func ReadRootRefData(msg *capnp.Message) (RefData, error) {
	root, err := msg.RootPtr()
	return RefData{root.Struct()}, err
}

func (s RefData) String() string {
	str, _ := text.Marshal(0x98886448aacaa938, s.Struct)
	return str
}

func (s RefData) Left() uint32 {
	return s.Struct.Uint32(0)
}

func (s RefData) SetLeft(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s RefData) Right() uint32 {
	return s.Struct.Uint32(4)
}

func (s RefData) SetRight(v uint32) {
	s.Struct.SetUint32(4, v)
}

// RefData_List is a list of RefData.
type RefData_List struct{ capnp.List }

// NewRefData creates a new list of RefData.
func NewRefData_List(s *capnp.Segment, sz int32) (RefData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RefData_List{l}, err
}

func (s RefData_List) At(i int) RefData { return RefData{s.List.Struct(i)} }

func (s RefData_List) Set(i int, v RefData) error { return s.List.SetStruct(i, v.Struct) }

func (s RefData_List) String() string {
	str, _ := text.MarshalList(0x98886448aacaa938, s.List)
	return str
}

// RefData_Promise is a wrapper for a RefData promised by a client call.
type RefData_Promise struct{ *capnp.Pipeline }

func (p RefData_Promise) Struct() (RefData, error) {
	s, err := p.Pipeline.Struct()
	return RefData{s}, err
}

type FuncObj struct{ capnp.Struct }

// FuncObj_TypeID is the unique identifier for the type FuncObj.
const FuncObj_TypeID = 0x833effa94af38e69

func NewFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func NewRootFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func ReadRootFuncObj(msg *capnp.Message) (FuncObj, error) {
	root, err := msg.RootPtr()
	return FuncObj{root.Struct()}, err
}

func (s FuncObj) String() string {
	str, _ := text.Marshal(0x833effa94af38e69, s.Struct)
	return str
}

func (s FuncObj) Kind() uint16 {
	return s.Struct.Uint16(4)
}

func (s FuncObj) SetKind(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s FuncObj) Arg() uint32 {
	return s.Struct.Uint32(0)
}

func (s FuncObj) SetArg(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s FuncObj) Dependencies() (capnp.UInt32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt32List{List: p.List()}, err
}

func (s FuncObj) HasDependencies() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FuncObj) SetDependencies(v capnp.UInt32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDependencies sets the dependencies field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s FuncObj) NewDependencies(n int32) (capnp.UInt32List, error) {
	l, err := capnp.NewUInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FuncObj) Result() (capnp.Pointer, error) {
	return s.Struct.Pointer(1)
}

func (s FuncObj) HasResult() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FuncObj) ResultPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s FuncObj) SetResult(v capnp.Pointer) error {
	return s.Struct.SetPointer(1, v)
}

func (s FuncObj) SetResultPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// FuncObj_List is a list of FuncObj.
type FuncObj_List struct{ capnp.List }

// NewFuncObj creates a new list of FuncObj.
func NewFuncObj_List(s *capnp.Segment, sz int32) (FuncObj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FuncObj_List{l}, err
}

func (s FuncObj_List) At(i int) FuncObj { return FuncObj{s.List.Struct(i)} }

func (s FuncObj_List) Set(i int, v FuncObj) error { return s.List.SetStruct(i, v.Struct) }

func (s FuncObj_List) String() string {
	str, _ := text.MarshalList(0x833effa94af38e69, s.List)
	return str
}

// FuncObj_Promise is a wrapper for a FuncObj promised by a client call.
type FuncObj_Promise struct{ *capnp.Pipeline }

func (p FuncObj_Promise) Struct() (FuncObj, error) {
	s, err := p.Pipeline.Struct()
	return FuncObj{s}, err
}

func (p FuncObj_Promise) Result() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(1)
}

const schema_85d3acc39d94e0f8 = "x\xda\x8c\xcf\xbfJ#Q\x18\x05\xf0s\xee\x9d\xecL" +
	"\x95\xe4&\xe9\x17\xc2\x16\xbb\x0b\xbb\xd9\x7f\xc5n\x8a\xdd" +
	"\x15DT\x10s\x03v\x16^gn2\x13\x87a\x98" +
	"L\xb0\xb1\x11\x15bcea\xe3\x03D\xec}\x00;" +
	"[_\xc0\xce\x07\xb0\xb1\x1bI\x82\x16V6\x1f|\x87" +
	"S\x9c_\xf5\xf8\xbfP\xa5+@{\xa5wEt\xf2" +
	"\xb0:)\xfe\x1e@7\xc9\xe2\xf1\xee\xf4\xfc\xfa\xf2\xf6" +
	"\x08%\xe1\x02\xdf\x17\xbaT\x1b.\xa0\xf4=X\xfc\x9e" +
	"\xdc\\,\x07\xe3\xb3WU\xc7\x05~\xfea\x97\xf55" +
	"\xba@}\x85\xbb`\x11%\xb9\xcd\x12\x13;\xad\xc07" +
	"~h[\xfd\xcc\xa4\xe1\xfc~\xf5M\x9a\xa4\xed\xa5Q" +
	"\xe2\xafos\xd0!uU:\xa4C@\x99&\xa07" +
	"%u(X\x15\x0dN3\xfb\x19\xd0[\x92:\x16\xa4" +
	"hP\x00*\x1a\x00:\x94\xd4\x87\x82J\xb2A\x09\xa8" +
	"\xfd6\xa0\xf7$\xf5X\xd05Y\x9f\x1e\x04=\xb0\xb2" +
	"\x13%\x01]\x08\xba`\x11\xd8\xd4&\x81MP\xf1#" +
	";d\x19\xecH\xce\xaae\xf0_f\x87\xa38g\x0d" +
	"\x82\xb5\xb7A\xba\xb6\xb7hr\x9a)\xc4\x93\x0e0\x83" +
	"|\x9a\x8e\xfe \xa9\xbf\x09*r.\xf9\xf2\x03\xd0\x1f" +
	"%\xf5/\xc1Jl{\xf9\xf3\xc2\xf7Y\xd4\x0f_\xbe" +
	"\xa7\x00\x00\x00\xff\xff\xedy_\x91"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x833effa94af38e69,
		0x98886448aacaa938)
}
