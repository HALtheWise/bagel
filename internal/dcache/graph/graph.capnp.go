// Code generated by capnpc-go. DO NOT EDIT.

package graph

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RefData struct{ capnp.Struct }

// RefData_TypeID is the unique identifier for the type RefData.
const RefData_TypeID = 0x98886448aacaa938

func NewRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func NewRootRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func ReadRootRefData(msg *capnp.Message) (RefData, error) {
	root, err := msg.RootPtr()
	return RefData{root.Struct()}, err
}

func (s RefData) String() string {
	str, _ := text.Marshal(0x98886448aacaa938, s.Struct)
	return str
}

func (s RefData) Left() uint32 {
	return s.Struct.Uint32(0)
}

func (s RefData) SetLeft(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s RefData) Right() uint32 {
	return s.Struct.Uint32(4)
}

func (s RefData) SetRight(v uint32) {
	s.Struct.SetUint32(4, v)
}

// RefData_List is a list of RefData.
type RefData_List struct{ capnp.List }

// NewRefData creates a new list of RefData.
func NewRefData_List(s *capnp.Segment, sz int32) (RefData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RefData_List{l}, err
}

func (s RefData_List) At(i int) RefData { return RefData{s.List.Struct(i)} }

func (s RefData_List) Set(i int, v RefData) error { return s.List.SetStruct(i, v.Struct) }

func (s RefData_List) String() string {
	str, _ := text.MarshalList(0x98886448aacaa938, s.List)
	return str
}

// RefData_Promise is a wrapper for a RefData promised by a client call.
type RefData_Promise struct{ *capnp.Pipeline }

func (p RefData_Promise) Struct() (RefData, error) {
	s, err := p.Pipeline.Struct()
	return RefData{s}, err
}

type FuncObj struct{ capnp.Struct }

// FuncObj_TypeID is the unique identifier for the type FuncObj.
const FuncObj_TypeID = 0x833effa94af38e69

func NewFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func NewRootFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func ReadRootFuncObj(msg *capnp.Message) (FuncObj, error) {
	root, err := msg.RootPtr()
	return FuncObj{root.Struct()}, err
}

func (s FuncObj) String() string {
	str, _ := text.Marshal(0x833effa94af38e69, s.Struct)
	return str
}

func (s FuncObj) Kind() uint16 {
	return s.Struct.Uint16(4)
}

func (s FuncObj) SetKind(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s FuncObj) Arg() uint32 {
	return s.Struct.Uint32(0)
}

func (s FuncObj) SetArg(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s FuncObj) Dependencies() (capnp.UInt32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt32List{List: p.List()}, err
}

func (s FuncObj) HasDependencies() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FuncObj) SetDependencies(v capnp.UInt32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDependencies sets the dependencies field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s FuncObj) NewDependencies(n int32) (capnp.UInt32List, error) {
	l, err := capnp.NewUInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FuncObj) Result() (capnp.Pointer, error) {
	return s.Struct.Pointer(1)
}

func (s FuncObj) HasResult() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FuncObj) ResultPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s FuncObj) SetResult(v capnp.Pointer) error {
	return s.Struct.SetPointer(1, v)
}

func (s FuncObj) SetResultPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// FuncObj_List is a list of FuncObj.
type FuncObj_List struct{ capnp.List }

// NewFuncObj creates a new list of FuncObj.
func NewFuncObj_List(s *capnp.Segment, sz int32) (FuncObj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FuncObj_List{l}, err
}

func (s FuncObj_List) At(i int) FuncObj { return FuncObj{s.List.Struct(i)} }

func (s FuncObj_List) Set(i int, v FuncObj) error { return s.List.SetStruct(i, v.Struct) }

func (s FuncObj_List) String() string {
	str, _ := text.MarshalList(0x833effa94af38e69, s.List)
	return str
}

// FuncObj_Promise is a wrapper for a FuncObj promised by a client call.
type FuncObj_Promise struct{ *capnp.Pipeline }

func (p FuncObj_Promise) Struct() (FuncObj, error) {
	s, err := p.Pipeline.Struct()
	return FuncObj{s}, err
}

func (p FuncObj_Promise) Result() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(1)
}

type DiskCache struct{ capnp.Struct }

// DiskCache_TypeID is the unique identifier for the type DiskCache.
const DiskCache_TypeID = 0x8c65657245fa62cc

func NewDiskCache(s *capnp.Segment) (DiskCache, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return DiskCache{st}, err
}

func NewRootDiskCache(s *capnp.Segment) (DiskCache, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return DiskCache{st}, err
}

func ReadRootDiskCache(msg *capnp.Message) (DiskCache, error) {
	root, err := msg.RootPtr()
	return DiskCache{root.Struct()}, err
}

func (s DiskCache) String() string {
	str, _ := text.Marshal(0x8c65657245fa62cc, s.Struct)
	return str
}

func (s DiskCache) Version() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DiskCache) HasVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiskCache) VersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DiskCache) SetVersion(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DiskCache) Refs() (RefData_List, error) {
	p, err := s.Struct.Ptr(1)
	return RefData_List{List: p.List()}, err
}

func (s DiskCache) HasRefs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetRefs(v RefData_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRefs sets the refs field to a newly
// allocated RefData_List, preferring placement in s's segment.
func (s DiskCache) NewRefs(n int32) (RefData_List, error) {
	l, err := NewRefData_List(s.Struct.Segment(), n)
	if err != nil {
		return RefData_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s DiskCache) Strings() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt8List{List: p.List()}, err
}

func (s DiskCache) HasStrings() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetStrings(v capnp.UInt8List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewStrings sets the strings field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s DiskCache) NewStrings(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s DiskCache) StringsUsed() uint32 {
	return s.Struct.Uint32(0)
}

func (s DiskCache) SetStringsUsed(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s DiskCache) Funcs() (FuncObj_List, error) {
	p, err := s.Struct.Ptr(3)
	return FuncObj_List{List: p.List()}, err
}

func (s DiskCache) HasFuncs() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetFuncs(v FuncObj_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewFuncs sets the funcs field to a newly
// allocated FuncObj_List, preferring placement in s's segment.
func (s DiskCache) NewFuncs(n int32) (FuncObj_List, error) {
	l, err := NewFuncObj_List(s.Struct.Segment(), n)
	if err != nil {
		return FuncObj_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// DiskCache_List is a list of DiskCache.
type DiskCache_List struct{ capnp.List }

// NewDiskCache creates a new list of DiskCache.
func NewDiskCache_List(s *capnp.Segment, sz int32) (DiskCache_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return DiskCache_List{l}, err
}

func (s DiskCache_List) At(i int) DiskCache { return DiskCache{s.List.Struct(i)} }

func (s DiskCache_List) Set(i int, v DiskCache) error { return s.List.SetStruct(i, v.Struct) }

func (s DiskCache_List) String() string {
	str, _ := text.MarshalList(0x8c65657245fa62cc, s.List)
	return str
}

// DiskCache_Promise is a wrapper for a DiskCache promised by a client call.
type DiskCache_Promise struct{ *capnp.Pipeline }

func (p DiskCache_Promise) Struct() (DiskCache, error) {
	s, err := p.Pipeline.Struct()
	return DiskCache{s}, err
}

type RefResult struct{ capnp.Struct }

// RefResult_TypeID is the unique identifier for the type RefResult.
const RefResult_TypeID = 0x98fd92d0ad976d9a

func NewRefResult(s *capnp.Segment) (RefResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefResult{st}, err
}

func NewRootRefResult(s *capnp.Segment) (RefResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefResult{st}, err
}

func ReadRootRefResult(msg *capnp.Message) (RefResult, error) {
	root, err := msg.RootPtr()
	return RefResult{root.Struct()}, err
}

func (s RefResult) String() string {
	str, _ := text.Marshal(0x98fd92d0ad976d9a, s.Struct)
	return str
}

func (s RefResult) Ref() uint32 {
	return s.Struct.Uint32(0)
}

func (s RefResult) SetRef(v uint32) {
	s.Struct.SetUint32(0, v)
}

// RefResult_List is a list of RefResult.
type RefResult_List struct{ capnp.List }

// NewRefResult creates a new list of RefResult.
func NewRefResult_List(s *capnp.Segment, sz int32) (RefResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RefResult_List{l}, err
}

func (s RefResult_List) At(i int) RefResult { return RefResult{s.List.Struct(i)} }

func (s RefResult_List) Set(i int, v RefResult) error { return s.List.SetStruct(i, v.Struct) }

func (s RefResult_List) String() string {
	str, _ := text.MarshalList(0x98fd92d0ad976d9a, s.List)
	return str
}

// RefResult_Promise is a wrapper for a RefResult promised by a client call.
type RefResult_Promise struct{ *capnp.Pipeline }

func (p RefResult_Promise) Struct() (RefResult, error) {
	s, err := p.Pipeline.Struct()
	return RefResult{s}, err
}

const schema_85d3acc39d94e0f8 = "x\xda\x94\x92Ok\xd4@\x18\xc6\x9fg&m\xf6P" +
	"\xbb\x9bn\xf0\xbaP<hA\xdb\xaa\x07\xe9\xc1\x8aV" +
	"\x11/v\x16\xbcy0\x9b\xccn\xd2\xaeqI\xb2\xea" +
	"A)E\x85\x1eDT\x14\xab\xe0A\xd0\xc3J\xfb\x0d" +
	"\x14\x04/\"\x1e\x04\xbf\x80\x17\xf1\x03\x88\xa0\x82Df" +
	"\xffY\x8a\x87z\x09a\xf8\xbdy\xe6\xf7\xe4\x9d\xd9\xcd" +
	"cbv\xa4A@\x95FF\xf3\xe8\xce\xb73\x9d\xfc" +
	"\xe8\x0d\xa8I2\xff\xf1\xf9\xc1\xd3\xb7\x1b\x9fnaD" +
	"\xd8\xc0\xec\xe3*\x9dM\x1bp:_\xc1\xfcC\xed\xd7" +
	"\xc9D\xeb\xdb\xdbQ\xcb\x06\x0e\xddc\x8d\xe5\x174\xaf" +
	"\xcfX!\x98\x1f\xe9\xbc\x7fy:X[\xdf\x86w\xe9" +
	"/\xa2\xca\xf2O\x93Q\xfe.\xae\x80\xf9\x93\x8b\x8f6" +
	"?\xde\xff\xfdOX\xc9\x1a\xcbZ\x1a\xd8\x93\xf3`\x1e" +
	"\xc5\x99Nb\xafiM\x07\xbe\xe7\x87z\xba\x91x\xad" +
	"\xb0\xf7<\xe0{\xad\xb85w\xaa\x1d\xfbgk\\Z" +
	"$UIZ\xa4E\xc0\xf1&\x01u^R\x85\x82%" +
	"\xe1\xd2\x9c\xe9)@]\x90TMA\x0a\x97\x02p\xa2" +
	"%@\x85\x92\xea\xa6\xa0#\xe9R\x02\xce\xea\x1c\xa0\xae" +
	"I\xaa5A\xdbK\x1a,@\xb0\x00\x16\x97\xa38\xa0" +
	"\x0dA\x1b\xcc\x03\xdd\xd2q\xa0c\x14\xfdH\xa7\x1c\x07" +
	"\x17%\xbb\xe888\x9f\xe8\xb4\xdd\xcc8\x01\xc1\x89\x9d" +
	"\x89,D\xe9\xf2\x09\xcf\xf6CmT\\i\x01]\x95" +
	"\xeb\xc7\x01u\xb5\x7fE\xb2\xe7\xb2:\xd5\xbf\xe2\xba\xa0" +
	"#\xfa2\x0f\x0dyWRm\x08:\x96\xec\xc9t\x0e" +
	"\x02\xea\xb9\xa4z#H\xe9\xd2\x02\x9c\xd75@\xbd\x92" +
	"T\xef\x04W.\xeb$\x8d.\xc5\x1c\x83\xe0\x18XL" +
	"t}hS\xfa\xfboAs\xb8\x92fI\x147\x86" +
	"\xc0hO\xb7Ro\xc7\xfe\x96\xa9\xe1\xae\xf5\xa6\xf2\xfe" +
	"\xd49\xd8\xa9\x0e\x06u\xee\xa4\x94\xaa\xae/x\x19=" +
	"SIaX\xc9>c\xbfGR\xcdl\xa9d\xbf\x11" +
	"\xdd+\xa9\x0e\x0b\x16\x9b\xba\x9e\x0dr*I\xd4\x08\xb3" +
	"\xffL\xad\xea\xd4n73\x93k\x0dsw\x99\xad*" +
	"H*W\xd0Nt}\xf0\xcd?\x01\x00\x00\xff\xff\x94" +
	"\x84\xd3\xb9"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x833effa94af38e69,
		0x8c65657245fa62cc,
		0x98886448aacaa938,
		0x98fd92d0ad976d9a)
}
