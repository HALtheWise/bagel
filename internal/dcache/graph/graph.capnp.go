// Code generated by capnpc-go. DO NOT EDIT.

package graph

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RefData struct{ capnp.Struct }

// RefData_TypeID is the unique identifier for the type RefData.
const RefData_TypeID = 0x98886448aacaa938

func NewRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func NewRootRefData(s *capnp.Segment) (RefData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefData{st}, err
}

func ReadRootRefData(msg *capnp.Message) (RefData, error) {
	root, err := msg.RootPtr()
	return RefData{root.Struct()}, err
}

func (s RefData) String() string {
	str, _ := text.Marshal(0x98886448aacaa938, s.Struct)
	return str
}

func (s RefData) Left() uint32 {
	return s.Struct.Uint32(0)
}

func (s RefData) SetLeft(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s RefData) Right() uint32 {
	return s.Struct.Uint32(4)
}

func (s RefData) SetRight(v uint32) {
	s.Struct.SetUint32(4, v)
}

// RefData_List is a list of RefData.
type RefData_List struct{ capnp.List }

// NewRefData creates a new list of RefData.
func NewRefData_List(s *capnp.Segment, sz int32) (RefData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RefData_List{l}, err
}

func (s RefData_List) At(i int) RefData { return RefData{s.List.Struct(i)} }

func (s RefData_List) Set(i int, v RefData) error { return s.List.SetStruct(i, v.Struct) }

func (s RefData_List) String() string {
	str, _ := text.MarshalList(0x98886448aacaa938, s.List)
	return str
}

// RefData_Promise is a wrapper for a RefData promised by a client call.
type RefData_Promise struct{ *capnp.Pipeline }

func (p RefData_Promise) Struct() (RefData, error) {
	s, err := p.Pipeline.Struct()
	return RefData{s}, err
}

type FuncObj struct{ capnp.Struct }

// FuncObj_TypeID is the unique identifier for the type FuncObj.
const FuncObj_TypeID = 0x833effa94af38e69

func NewFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func NewRootFuncObj(s *capnp.Segment) (FuncObj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FuncObj{st}, err
}

func ReadRootFuncObj(msg *capnp.Message) (FuncObj, error) {
	root, err := msg.RootPtr()
	return FuncObj{root.Struct()}, err
}

func (s FuncObj) String() string {
	str, _ := text.Marshal(0x833effa94af38e69, s.Struct)
	return str
}

func (s FuncObj) Kind() uint16 {
	return s.Struct.Uint16(4)
}

func (s FuncObj) SetKind(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s FuncObj) Arg() uint32 {
	return s.Struct.Uint32(0)
}

func (s FuncObj) SetArg(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s FuncObj) Dependencies() (capnp.UInt32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt32List{List: p.List()}, err
}

func (s FuncObj) HasDependencies() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FuncObj) SetDependencies(v capnp.UInt32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDependencies sets the dependencies field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s FuncObj) NewDependencies(n int32) (capnp.UInt32List, error) {
	l, err := capnp.NewUInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FuncObj) Result() (capnp.Pointer, error) {
	return s.Struct.Pointer(1)
}

func (s FuncObj) HasResult() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FuncObj) ResultPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s FuncObj) SetResult(v capnp.Pointer) error {
	return s.Struct.SetPointer(1, v)
}

func (s FuncObj) SetResultPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// FuncObj_List is a list of FuncObj.
type FuncObj_List struct{ capnp.List }

// NewFuncObj creates a new list of FuncObj.
func NewFuncObj_List(s *capnp.Segment, sz int32) (FuncObj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FuncObj_List{l}, err
}

func (s FuncObj_List) At(i int) FuncObj { return FuncObj{s.List.Struct(i)} }

func (s FuncObj_List) Set(i int, v FuncObj) error { return s.List.SetStruct(i, v.Struct) }

func (s FuncObj_List) String() string {
	str, _ := text.MarshalList(0x833effa94af38e69, s.List)
	return str
}

// FuncObj_Promise is a wrapper for a FuncObj promised by a client call.
type FuncObj_Promise struct{ *capnp.Pipeline }

func (p FuncObj_Promise) Struct() (FuncObj, error) {
	s, err := p.Pipeline.Struct()
	return FuncObj{s}, err
}

func (p FuncObj_Promise) Result() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(1)
}

type DiskCache struct{ capnp.Struct }

// DiskCache_TypeID is the unique identifier for the type DiskCache.
const DiskCache_TypeID = 0x8c65657245fa62cc

func NewDiskCache(s *capnp.Segment) (DiskCache, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return DiskCache{st}, err
}

func NewRootDiskCache(s *capnp.Segment) (DiskCache, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return DiskCache{st}, err
}

func ReadRootDiskCache(msg *capnp.Message) (DiskCache, error) {
	root, err := msg.RootPtr()
	return DiskCache{root.Struct()}, err
}

func (s DiskCache) String() string {
	str, _ := text.Marshal(0x8c65657245fa62cc, s.Struct)
	return str
}

func (s DiskCache) Version() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DiskCache) HasVersion() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiskCache) VersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DiskCache) SetVersion(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DiskCache) Refs() (RefData_List, error) {
	p, err := s.Struct.Ptr(1)
	return RefData_List{List: p.List()}, err
}

func (s DiskCache) HasRefs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetRefs(v RefData_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRefs sets the refs field to a newly
// allocated RefData_List, preferring placement in s's segment.
func (s DiskCache) NewRefs(n int32) (RefData_List, error) {
	l, err := NewRefData_List(s.Struct.Segment(), n)
	if err != nil {
		return RefData_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s DiskCache) Strings() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s DiskCache) HasStrings() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetStrings(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s DiskCache) StringsSize() uint32 {
	return s.Struct.Uint32(0)
}

func (s DiskCache) SetStringsSize(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s DiskCache) Funcs() (FuncObj_List, error) {
	p, err := s.Struct.Ptr(3)
	return FuncObj_List{List: p.List()}, err
}

func (s DiskCache) HasFuncs() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s DiskCache) SetFuncs(v FuncObj_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewFuncs sets the funcs field to a newly
// allocated FuncObj_List, preferring placement in s's segment.
func (s DiskCache) NewFuncs(n int32) (FuncObj_List, error) {
	l, err := NewFuncObj_List(s.Struct.Segment(), n)
	if err != nil {
		return FuncObj_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// DiskCache_List is a list of DiskCache.
type DiskCache_List struct{ capnp.List }

// NewDiskCache creates a new list of DiskCache.
func NewDiskCache_List(s *capnp.Segment, sz int32) (DiskCache_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return DiskCache_List{l}, err
}

func (s DiskCache_List) At(i int) DiskCache { return DiskCache{s.List.Struct(i)} }

func (s DiskCache_List) Set(i int, v DiskCache) error { return s.List.SetStruct(i, v.Struct) }

func (s DiskCache_List) String() string {
	str, _ := text.MarshalList(0x8c65657245fa62cc, s.List)
	return str
}

// DiskCache_Promise is a wrapper for a DiskCache promised by a client call.
type DiskCache_Promise struct{ *capnp.Pipeline }

func (p DiskCache_Promise) Struct() (DiskCache, error) {
	s, err := p.Pipeline.Struct()
	return DiskCache{s}, err
}

type RefResult struct{ capnp.Struct }

// RefResult_TypeID is the unique identifier for the type RefResult.
const RefResult_TypeID = 0x98fd92d0ad976d9a

func NewRefResult(s *capnp.Segment) (RefResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefResult{st}, err
}

func NewRootRefResult(s *capnp.Segment) (RefResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RefResult{st}, err
}

func ReadRootRefResult(msg *capnp.Message) (RefResult, error) {
	root, err := msg.RootPtr()
	return RefResult{root.Struct()}, err
}

func (s RefResult) String() string {
	str, _ := text.Marshal(0x98fd92d0ad976d9a, s.Struct)
	return str
}

func (s RefResult) Ref() uint32 {
	return s.Struct.Uint32(0)
}

func (s RefResult) SetRef(v uint32) {
	s.Struct.SetUint32(0, v)
}

// RefResult_List is a list of RefResult.
type RefResult_List struct{ capnp.List }

// NewRefResult creates a new list of RefResult.
func NewRefResult_List(s *capnp.Segment, sz int32) (RefResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RefResult_List{l}, err
}

func (s RefResult_List) At(i int) RefResult { return RefResult{s.List.Struct(i)} }

func (s RefResult_List) Set(i int, v RefResult) error { return s.List.SetStruct(i, v.Struct) }

func (s RefResult_List) String() string {
	str, _ := text.MarshalList(0x98fd92d0ad976d9a, s.List)
	return str
}

// RefResult_Promise is a wrapper for a RefResult promised by a client call.
type RefResult_Promise struct{ *capnp.Pipeline }

func (p RefResult_Promise) Struct() (RefResult, error) {
	s, err := p.Pipeline.Struct()
	return RefResult{s}, err
}

const schema_85d3acc39d94e0f8 = "x\xda\x94\x92?h\xd4`\x18\xc6\x9f\xe7\xfbRsC" +
	"\xdb\xbb\xf4\xb2\x1f\x14\x07-h[u\x90\x0e\xd6?U" +
	"\xc4\xc5~'n\x0e\xe6r\xdf]\xd2\x9e\xf1Hr*" +
	"\xa2\x94\xa2B\x07\x11\x95\x8a\xad\xe8\xe0\xe0p\xd2\x03G" +
	"w7q\x10\xc4\xddE\xc4\xd9E\x04\x89|\xf7\xcfR" +
	"\x1c\xea\x12\xc2\xcb\x8f<\xef\xef\xc9;3\xc1\xe3bv" +
	"\xa4N@\x15F\xf6d\xe1\x83\x1f\xe7\xda\xd9\xb1;P" +
	"\x93d\xf6\xf3\xcb\xfa\x8bw[\x9f\xeeaD\xd8\xc0\xec" +
	"f\x99N\xc7\x06\x9c\xf670\xfbP\xf9u:\xd6\xfa" +
	"\xfeN\xd4\xb2\x81\xc3\x8fXa\xf1\x15\xcd\xebK\x96\x08" +
	"fG\xdb\xef_\x9f\xad\xaem\xec\xc0\xbb\xf4gQf" +
	"\xf1\xbb\xc9(~\x15\xd7\xc1\xec\xd9\x95\xa7\x9d\x8f\x8f\x7f" +
	"\xff\x13>!+,^\x94\x06Vr\x1e\xcc\xc2(\xd5" +
	"q\xe45\xac\xe9\xaa\xef\xf9\x81\x9e\xae\xc7^3\xe8=" +
	"\x0f\xfa^3j\xce\x9diE\xfe\xf9\x0a\x97\x16IU" +
	"\x90\x16i\x11p\xbcI@]\x92T\x81`A\xb84" +
	"3=\x05\xa8\xcb\x92\xaa!H\xe1R\x00N\xb8\x04\xa8" +
	"@R\xdd\x15t$]J\xc0Y\x9d\x03\xd4-I\xb5" +
	"&h{q\x9d9\x08\xe6\xc0\xfcr\x18UiC\xd0" +
	"\x06\xb3\xaan\xea\xa8\xaa#\xe4\xfdP'\x1c\x07\x17%" +
	"\xbb\xe888\x1f\xeb\xa4\xd5H9\x01\xc1\x89\xdd\x89," +
	"\x84\xc9\xf2)\xcf\xf6\x03mT\\i\x01]\x95\xdb'" +
	"\x01u\xa3\xbf\"\xd9sY\x9d\xea\xaf\xb8!\xe8\x88\xbe" +
	"\xcc\x13C>\x94T\xcf\x05\x1dK\xf6d6\x0f\x01j" +
	"]R\xbd\x11\xa4ti\x01N\xa7\x02\xa8-I\xf5V" +
	"p\xe5\x9a\x8e\x93\xf0j\xc4Q\x08\x8e\x82\xf9X\xd7\x86" +
	"6\x85\xbf\xff\x164\xc3\x95$\x8d\xc3\xa8\x9ep\x0c\x82" +
	"c`\xa9\xd6\x8a\xfcm\xf8\xf0\xc8zx\xd6\xc7/\xc0" +
	"\x0eo\xeaA\x8f\xbbi\xa3\xack\x0b^J\xcft\x91" +
	"\x1bv\xb1\xdfh\xef\x95T3\xdb\xba8`\x0c\xf7I" +
	"\xaa#\x82\xf9\x86\xae\xa5\x83\x9cR\x1c\xd6\x83\xf4?S" +
	"\xcb:\xb1[\x8d\xd4\xe4Z\xc3\xdc1sN9I\xe5" +
	"\x0a\xda\xb1\xae\x0d\xbe\xf9'\x00\x00\xff\xfff~\xd2\x91"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x833effa94af38e69,
		0x8c65657245fa62cc,
		0x98886448aacaa938,
		0x98fd92d0ad976d9a)
}
